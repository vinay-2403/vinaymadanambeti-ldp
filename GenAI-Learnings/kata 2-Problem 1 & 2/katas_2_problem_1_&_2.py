# -*- coding: utf-8 -*-
"""Katas-2: Problem 1 & 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OH_q5LO6GZWZZYlJW0Sshsul4otnqxIg

# Problem 1

**Generating Song Lyrics with NumPy**

**Scenario:** You are working on a RAG-based application that generates creative text formats like song lyrics. You have a dataset of existing popular song lyrics stored in a CSV file. Your task is to use NumPy to:

1. Load the song lyrics data from the CSV file.
2. Preprocess the data by converting all lyrics to lowercase and removing punctuation.
3. Use NumPy to create a random sample of 10 song lyrics from the dataset.

**Dataset :**

[**Lyrics Sample Dataset**](https://docs.google.com/spreadsheets/d/1GmUxCf1m-I94DsVMUaOsTikvh9QqFZpjmLvtNI61ylA/edit?usp=sharing)
"""

import pandas as pd

df = pd.read_csv("lyrics_dataset.csv")
print(df.head())

import string
df["Lyrics"] = df["Lyrics"].str.lower()
df["Lyrics"] = df["Lyrics"].str.replace(f"[{string.punctuation}]", "", regex=True)

print(df.head())

import numpy as np

np.random.seed(42)
sample_lyrics = np.random.choice(df["Lyrics"], size=10, replace=False)

for i, lyric in enumerate(sample_lyrics, 1):
    print(f"{i}. {lyric}")

"""# Problem 2

**Scenario**: You are building a RAG-based system to analyze customer reviews and classify them as positive or negative. You have a dataset of customer reviews stored in a CSV file, along with their sentiment labels (positive or negative). Here's your task:

1. Load the customer review data from the CSV file using Pandas.
2. Preprocess the review text by converting it to lowercase and removing punctuation.
3. Calculate the average word count for positive and negative reviews.
4. Visualize the distribution of word count for positive and negative reviews using Matplotlib
5. Plot a positive review and observe it should be near the positive sentiments clusters

**Dataset:**

[**Customer Review**](https://docs.google.com/spreadsheets/d/1C0YjGQ-SONdXS-fqmrNe3Uus5xS3e91izsZFxZN5doA/edit?usp=sharing)
"""

import pandas as pd

df = pd.read_csv("customer_review.csv")
print(df.head())

import string

df["Review"] = df["Review"].str.lower()
df["Review"] = df["Review"].str.replace(f"[{string.punctuation}]", "", regex=True)

print(df.head())

df["word_count"] = df["Review"].apply(lambda x: len(x.split()))


avg_word_count = df.groupby("Sentiment")["word_count"].mean()
print("\nAverage Word Count by Sentiment:\n", avg_word_count)

df

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))

for sentiment, color in zip(['positive', 'negative'], ['green', 'red']):
    subset = df[df['Sentiment'] == sentiment]
    plt.hist(
        subset['word_count'],
        bins=20,
        alpha=0.6,
        color=color,
        label=sentiment
    )
plt.title("Distribution of Word Counts by Sentiment")
plt.xlabel("Word Count")
plt.ylabel("Frequency")
plt.legend()
plt.show()

colors = {'positive': 'green', 'negative': 'red'}

df = df[df['Sentiment'].isin(['positive', 'negative'])]

plt.figure(figsize=(10, 6))
plt.scatter(
    df.index,
    df['word_count'],
    c=df['Sentiment'].map(colors),
    alpha=0.6
)

plt.title("Scatter Plot of Word Count by Sentiment")
plt.xlabel("Review Index")
plt.ylabel("Word Count")
plt.show()

example_index = df[df["Sentiment"]=="positive"].index[0]
plt.scatter(example_index, df.loc[example_index,"word_count"], c="blue", s=200, edgecolors="black", label="Example Positive Review")

plt.title("Positive vs Negative Review Clusters")
plt.xlabel("Review Index")
plt.ylabel("Word Count")
plt.legend()
plt.show()

