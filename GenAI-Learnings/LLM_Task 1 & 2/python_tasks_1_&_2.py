# -*- coding: utf-8 -*-
"""Python Tasks 1 & 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18kxdTvmEJoCBHlfWw7ZMSWYtgzi2nJln

# Problem 1

"Task - 1 : You are given a list of integers where each number appears twice, except for one unique number that appears only once.
Example :
Input: [4, 1, 2, 1, 2]  
Output: 4  
"
"""

def find_unique_number(nums):
    unique = 0
    for num in nums:
        unique ^= num
    return unique

nums = [4, 1, 2, 1, 2]
print(find_unique_number(nums))

"""# Problem 2

"Task - 2 : Create a class BankAccount that allows a user to deposit, withdraw, and check the balance. Implement encapsulation so that the balance cannot be accessed directly but only through methods.

Requirements:

deposit(amount): Adds amount to the balance.
withdraw(amount): Deducts amount from the balance if sufficient funds exist.
get_balance(): Returns the current balance.
The balance should be private and should not be directly accessible.

Example usage :

acc = BankAccount(1000)  
acc.deposit(500)  
acc.withdraw(300)  
print(acc.get_balance())  # Output: 1200  

print(acc.__balance)  # This should raise an AttributeError  

"
"""

class BankAccount:
    def __init__(self, initial_balance):
        self.__balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"Deposited: {amount}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > self.__balance:
            print("Insufficient funds!")
        elif amount <= 0:
            print("Withdrawal amount must be positive.")
        else:
            self.__balance -= amount
            print(f"Withdrawn: {amount}")

    def get_balance(self):
        return self.__balance

acc = BankAccount(1000)
acc.deposit(500)
acc.withdraw(300)
print(acc.get_balance())


try:
    print(acc.__balance)
except AttributeError as e:
    print("Error:", e)